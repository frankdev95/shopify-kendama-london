{{ 'component-kendama-slideshow.css' | asset_url | stylesheet_tag}}

<div class="margin-vertical-lg">
    <slide-show>
        <h1 class="slideshow__header bold">{{ section.settings.heading | escape}}</h1>
        <div class="slideshow" 
            data-margin-width={{ section.settings.slide_margin }} 
            data-slide-width={{ section.settings.slide_width }} 
            data-slide-speed={{ section.settings.slide_speed }}
            data-automation={{ section.settings.toggle_automation }}>
            <div class="slideshow__arrow slideshow__arrow--left">
                {% if section.settings.arrow_icon != blank %}
                    {{ section.settings.arrow_icon | img_url: 'medium' | img_tag}}
                {% endif %}
            </div>
            <div class="slideshow__slides">
                {% for block in section.blocks %}
                    {% case block.type %}
                        {% when 'slide' %}
                            <div class="slideshow__slide" {{ block.shopify_attributes }}>
                                {% if block.settings.image != blank %}
                                    {{ block.settings.image | img_url: 'medium' | img_tag}}
                                {% else %}
                                    {{ 'image' | placeholder_svg_tag: 'slide__placeholder' }}
                                {% endif %}

                            </div>
                    {% endcase %}
                {% endfor %}
            </div>

            <div class="slideshow__arrow slideshow__arrow--right">
                {% if section.settings.arrow_icon != blank %}
                    {{ section.settings.arrow_icon | img_url: 'medium' | img_tag: 'right arrow'}}
                {% else %}
                    <img src="https://cdn.shopify.com/s/files/1/0586/8142/6089/files/next.png?v=1626815045" alt="right arrow">
                {% endif %}
            </div>
        </div>
    </slide-show>
</div>

{% javascript %}

class Slideshow extends HTMLElement {
    constructor() {
        super();
        this.slideshow = this.querySelector(".slideshow");
        this.slideshowSlides = this.querySelector(".slideshow__slides");
        this.slides = this.querySelectorAll(".slideshow__slide");

        this.arrows = this.querySelectorAll(".slideshow__arrow");
        this.arrowLeft = this.querySelector(".slideshow__arrow--left");
        this.arrowRight = this.querySelector(".slideshow__arrow--right");

        if (this.slides[0]) {

            this.slideWidth = parseInt(this.slideshow.dataset.slideWidth);
            this.slideMargin = parseInt(this.slideshow.dataset.marginWidth);
            this.slideSpeed = parseInt(this.slideshow.dataset.slideSpeed) * 1000;
            this.isAutomated = this.slideshow.dataset.automation;

            this.directions = {
                right: -1,
                left: 1
            }
    
            this.moveDir = this.directions.right;
            
            this.moveSlideLeft = this.moveSlide.bind(this, this.directions.left);
            this.moveSlideRight = this.moveSlide.bind(this, this.directions.right);

            this.arrowLeft?.addEventListener('click', () => {
                if(this.isAutomated == "true") this.restartAutomation();
                this.moveSlideLeft();
            });

            this.arrowRight?.addEventListener('click', () => {
                if(this.isAutomated == "true") this.restartAutomation();
                this.moveSlideRight();
            });

            console.log("Something");

            for (let i = 0; i < this.slides.length; i++) {
                this.slides[i].style.width = this.slideWidth + "px";
            }

            this.totalMargin = this.slideMargin * (this.slides.length - 1);
            
            this.setBounds = () => window.innerWidth <= 900 ? this.containerBounds = window.innerWidth / 100 * 100 : this.containerBounds = window.innerWidth / 100 * 80;
            this.setBounds();

            this.totalSlidesWidth = (this.slideWidth * this.slides.length) + this.totalMargin;

            this.initialLoad = true;

            this.placeSlides();
            this.onScreenResize();

            this.initialLoad = false;
        }
    }

    placeSlides() {
        if (this.totalSlidesWidth <= this.containerBounds) {
            this.isSingular = true;
            this.slideshow.style.width = this.totalSlidesWidth + "px";

            for (let i = 0; i < this.arrows.length; i++) {
                this.arrows[i].style.display = "none";
            } 

            this.slideshowSlides.style.height = this.slideWidth + "px";

        } else {
            if(this.onScreenResize && this.initialLoad) {
                
                for (let i = 0; i < this.arrows.length; i++) {
                    this.arrows[i].style.display = "initial";
                } 

                if(this.isAutomated == "true") this.startAutomation();
            }

            this.isSingular = false;
            this.slidesAmount = Math.floor((this.containerBounds + this.slideMargin) / (this.slideWidth  + this.slideMargin));

            console.log(`SlideWidth: ${this.slideWidth} \n Total Slide Width: ${this.slideWidth} \n Container Bounds: ${this.containerBounds} \n Slides Amount: ${this.slidesAmount} \n Slide Margin: ${this.slideMargin} \n TotalMargin: ${this.totalMargin} \n Total Slide Amount: ${this.totalSlideAmount}`);

            if (this.slidesAmount > 1) {
                if (this.slidesAmount % 2 === 0) {
                    if(this.slidesAmount === 2) this.isSingular = true;

                    this.slidesAmount--;

                    if (this.slidesAmount === 1) {
                        this.slideshow.style.width = this.slideWidth + "px";
                    } else {
                        this.slideshow.style.width = this.slidesAmount * this.slideWidth + (this.slidesAmount - 1) * this.slideMargin + "px";
                    }
                } else {
                    this.slideshow.style.width = this.slidesAmount * this.slideWidth + (this.slidesAmount - 1) * this.slideMargin + "px";
                }
            } else {
                this.slideshow.style.width = this.slideWidth + "px";
            }

            let counter = 0;

            for (let i = 1; i <= this.slidesAmount; i++) {
                counter += i;
            }

            this.slidePosition = counter / this.slidesAmount - 1;

            if(this.slidesAmount > 1) {
                this.slides[this.slidePosition].classList.add('slide--active');
            }

            this.slideshowSlides.style.height = this.slideWidth + 150 + "px";
        }

        for (let i = 0; i < this.slides.length; i++) {
            this.slides[i].style.left = (i * this.slideWidth) + (i * this.slideMargin) + "px";
        }
    }

    disconectCallback() {
        this.arrowLeft?.removeEventListener('click', this.moveSlideLeft.bind(this));
        this.arrowRight?.removeEventListener('click', this.moveSlide.bind(this, -1));
        
    }

    moveSlide(direction, event = null) {
        this.slidePosition += direction * -1;

        if(!this.isSingular) {
            this.arrowRight.style.display = this.slidePosition < this.slides.length -1 ? "initial" : "none";
            this.arrowLeft.style.display = this.slidePosition > 0 ? "initial" : "none";
        }

        for(let i = 0; i < this.slides.length; i++) {
            const amountToMove = (this.slideWidth + this.slideMargin) * direction;
            this.slides[i].style.left =  `${(parseInt(this.slides[i].style.left)) + amountToMove}px`;
        }

        if(this.slidesAmount > 1) {
            this.changeActiveClass(this.slidePosition, direction);
        }

        if(this.slidePosition === this.slides.length -1) {
            this.moveDir = this.directions.left;
        } else if(this.slidePosition === 0) {
            this.moveDir = this.directions.right;
        }

    }

    resetSlides() {
        if(this.slidePosition) this.slides[this.slidePosition].classList.remove('slide--active');
        this.moveDir = this.directions.right;
        this.setBounds();
        this.placeSlides();
    }

    startAutomation() {
        this.automationIntervalStopped = false;

        this.moveSlideInterval = setInterval(() => {
            this.moveSlide(this.moveDir);
        }, this.slideSpeed);
    }

    stopAutomation() {
        this.automationIntervalStopped = true;
        clearInterval(this.moveSlideInterval);
    }

    restartAutomation() {
        this.stopAutomation();
        clearTimeout(this.startAutomationTimeout);
        this.startAutomationTimeout = setTimeout(() => {
            this.startAutomation();
        }, 5000);
    }
    
    onScreenResize() {
        this.onScreenResize = true;

        window.addEventListener('resize', () => {

            clearTimeout(this.resizeInterval);
            clearInterval(this.moveSlideInterval);
            
            this.resizeInterval = setTimeout(() => {    
                this.resetSlides();
            }, 300)
        })
    } 

    changeActiveClass(slidePosition, direction) {
        this.slides[slidePosition + direction].classList.remove("slide--active");
        this.slides[slidePosition].classList.add("slide--active");
    }
}

customElements.define('slide-show', Slideshow)

{% endjavascript %}

{% schema %}
{
    "name": "Slideshow",
    "settings": [
        {
            "type": "text",
            "id": "heading",
            "default": "Section Heading",
            "label": "Heading"
        },
        {
            "type": "image_picker",
            "id": "arrow_icon",
            "label": "Arrow Icon"
        },
        {
            "type": "range",
            "id": "slide_width",
            "label": "Slide width",
            "info": "Control the slide image width",
            "default": 100,
            "min": 50,
            "max": 500,
            "step": 10,
            "unit": "px"
        },
        {
            "type": "range",
            "id": "slide_margin",
            "label": "Slide margin",
            "info": "Control the spacing between slides",
            "default": 70,
            "min": 50,
            "max": 150,
            "step": 5
        },
        {
            "type": "checkbox",
            "id": "toggle_automation",
            "label": "Toggle Automation",
            "info": "Control slideshow automation",
            "default": true
        },
        {
            "type": "range",
            "id": "slide_speed",
            "label": "Slide Speed",
            "info": "Control the speed at which the slides move",
            "default": 3,
            "min": 1,
            "max": 10,
            "step": 0.5
        }
    ],
    "blocks": [
        {
            "name": "Slide",
            "type": "slide",
            "settings": [
                {
                    "type": "image_picker",
                    "id": "image",
                    "label": "Image"
                }
            ]
        }
    ],
    "presets": [
        {
            "name": "Slideshow"
        }
    ]
}
{% endschema %}