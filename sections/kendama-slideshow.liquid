{{ 'component-kendama-slideshow.css' | asset_url | stylesheet_tag}}

<div class="margin-vertical-lg">
    <slide-show>
        <h1 class="slideshow__header">{{ section.settings.heading | escape}}</h1>
        <div class="slideshow" margin_width={{ section.settings.slide_margin }} slide_width={{ section.settings.slide_width }}>
            <div class="slideshow__arrow slideshow__arrow--left">
                {% if section.settings.arrow_icon != blank %}
                    {{ section.settings.arrow_icon | img_url: 'medium' | img_tag}}
                {% endif %}
            </div>
            <div class="slideshow__slides">
                {% for block in section.blocks %}
                    {% case block.type %}
                        {% when 'slide' %}
                                <div class="slideshow__slide" {{ block.shopify_attributes }}>
                                {% if block.settings.image != blank %}
                                    {{ block.settings.image | img_url: 'medium' | img_tag}}
                                {% else %}
                                    {{ 'image' | placeholder_svg_tag: 'slide__placeholder' }}   
                                {% endif %}
                            
                            </div>
                    {% endcase %}
                {% endfor %}
            </div>

            <div class="slideshow__arrow slideshow__arrow--right">
                {% if section.settings.arrow_icon != blank %}
                    {{ section.settings.arrow_icon | img_url: 'medium' | img_tag}}
                {% endif %}
            </div>
        </div>
    </slide-show>
</div>

{% javascript %}
    class Slideshow extends HTMLElement {
        constructor() {
            super();
        }
        
        connectedCallback() {

            this.slideshow = this.querySelector(".slideshow");
            this.slideshowSlides = this.querySelector(".slideshow__slides");
            this.slides = this.querySelectorAll(".slideshow__slide");

            this.arrows = this.querySelectorAll(".slideshow__arrow");
            this.arrowLeft = this.querySelector(".slideshow__arrow--left");
            this.arrowRight = this.querySelector(".slideshow__arrow--right");

            if(this.slides[0]) {
                console.log(this.slides);
                
                this.slideWidth = parseInt(this.slideshow.getAttribute('slide_width'));

                for(let i = 0; i < this.slides.length; i++) {
                    this.slides[i].style.width = this.slideWidth + "px";
                }

                this.slideMargin = parseInt(this.slideshow.getAttribute('margin_width'));
    
                this.totalMargin = this.slideMargin * (this.slides.length - 1);
    
                this.containerBounds = window.innerWidth / 100 * 90;
                this.totalSlidesWidth = (this.slideWidth * this.slides.length) + this.totalMargin;
    
                this.placeSlides();
            }
         
        }
        

        placeSlides() {
            if(this.totalSlidesWidth <= this.containerBounds) {
                this.slideshow.style.width = this.totalSlidesWidth + "px";

                for(let i = 0; i < this.arrows.length; i++) {
                    this.arrows[i].style.display = "none";
                 }

                 this.slideshowSlides.style.height = this.slides[0].clientHeight + "px";

            } else {
                this.isEventListeners = true;

                this.slidesAmount = Math.floor(this.containerBounds / (this.slideWidth + this.slideMargin));
        
                if(this.slidesAmount > 1) { 
                    if(this.slidesAmount % 2 === 0) {
                        this.slidesAmount--;
                        
                        if(this.slidesAmount === 1) {
                            this.slideshow.style.width = this.slideWidth + "px";
                        } else {
                            this.slideshow.style.width = this.slidesAmount * this.slideWidth + (this.slidesAmount - 1) * this.slideMargin + "px";
                        }
                    } else {
                        this.slideshow.style.width = this.slidesAmount * this.slideWidth + (this.slidesAmount - 1) * this.slideMargin + "px";
                    }
                } else {
                    console.log("less than 1");
                    this.slideshow.style.width = this.slideWidth + "px";
                }

                let counter = 0;

                for(let i = 1; i <= this.slidesAmount; i++) {
                    counter += i;
                }

                this.activeIndex = counter / this.slidesAmount - 1;
                this.slidePosition = this.activeIndex;

                this.slides[this.activeIndex].classList.add('slide--active')

                this.slideshowSlides.style.height = this.slides[this.activeIndex].clientHeight + 150 + "px";
                console.log(this.slideshowSlides);

                this.arrowLeft.addEventListener('click', this.moveSlideLeft.bind(this));
                this.arrowRight.addEventListener('click', this.moveSlideRight.bind(this));
            }

            for(let i = 0; i < this.slides.length; i++) {
                this.slides[i].style.left = (i * this.slideWidth) + (i * this.slideMargin) + "px";
            }
        }
        
        disconectCallback() {
            if(this.isEventListeners) {
                this.arrowLeft.removeEventListener('click', this.moveSlideLeft.bind(this));
                this.arrowRight.removeEventListener('click', this.moveSlideRight.bind(this));
            }
        }

        moveSlideLeft() {
            if(this.slidePosition === this.slides.length - 1) this.arrowRight.style.display = "initial";

            if(this.slidePosition > 0) {

                this.slides[this.activeIndex].classList.remove("slide--active");
                this.activeIndex--;
                this.slides[this.activeIndex].classList.add("slide--active");

                for(let i = 0; i < this.slides.length; i++) {
                    this.slides[i].style.left = (parseInt(this.slides[i].style.left)) + this.slideWidth + this.slideMargin + "px";
                }
                this.slidePosition--;

                if(this.slidePosition === 0) this.arrowLeft.style.display = "none";
                
            }

        }

        moveSlideRight() {
            if(this.slidePosition === 0) this.arrowLeft.style.display = "initial";

            if(this.slidePosition < this.slides.length - 1) {
                
                this.slides[this.activeIndex].classList.remove("slide--active");
                this.activeIndex++;
                this.slides[this.activeIndex].classList.add("slide--active");


                for(let i = 0; i < this.slides.length; i++) {
                    this.slides[i].style.left = (parseInt(this.slides[i].style.left) - this.slideWidth - this.slideMargin) + "px";
                }
                this.slidePosition++;
                
                if(this.slidePosition === this.slides.length - 1) this.arrowRight.style.display = "none";
                
            }
        }
    }

    customElements.define('slide-show', Slideshow)
{% endjavascript %}

{% schema %}
{
    "name": "Slideshow",
    "settings": [
        {
            "type": "text",
            "id": "heading",
            "default": "Section Heading",
            "label": "Heading"
        },
        {
            "type": "image_picker",
            "id": "arrow_icon",
            "label": "Arrow Icon"
        },
        {
            "type": "range",
            "id": "slide_width",
            "label": "Slide width",
            "info": "Use this to control the slide image width",
            "default": 300,
            "min": 50,
            "max": 500,
            "step": 10,
            "unit": "px"
        },
        {
            "type": "range",
            "id": "slide_margin",
            "label": "Slide margin",
            "info": "Use this to control the spacing between slides",
            "default": 20,
            "min": 0,
            "max": 150,
            "step": 5
        }
    ],
    "blocks": [
        {
            "name": "Slide",
            "type": "slide",
            "settings": [
                {
                    "type": "image_picker",
                    "id": "image",
                    "label": "Image"
                }
            ]
        }
    ],
    "presets": [
        {
            "name": "Slideshow"
        }
    ]
}
{% endschema %}